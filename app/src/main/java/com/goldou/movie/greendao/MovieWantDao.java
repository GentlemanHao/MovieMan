package com.goldou.movie.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.goldou.movie.bean.MovieWant;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MOVIE_WANT".
*/
public class MovieWantDao extends AbstractDao<MovieWant, Long> {

    public static final String TABLENAME = "MOVIE_WANT";

    /**
     * Properties of entity MovieWant.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Nm = new Property(1, String.class, "nm", false, "NM");
        public final static Property Src = new Property(2, String.class, "src", false, "SRC");
        public final static Property Cat = new Property(3, String.class, "cat", false, "CAT");
        public final static Property Rt = new Property(4, String.class, "rt", false, "RT");
        public final static Property Img = new Property(5, String.class, "img", false, "IMG");
        public final static Property Sc = new Property(6, String.class, "sc", false, "SC");
    }


    public MovieWantDao(DaoConfig config) {
        super(config);
    }
    
    public MovieWantDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MOVIE_WANT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"NM\" TEXT," + // 1: nm
                "\"SRC\" TEXT," + // 2: src
                "\"CAT\" TEXT," + // 3: cat
                "\"RT\" TEXT," + // 4: rt
                "\"IMG\" TEXT," + // 5: img
                "\"SC\" TEXT);"); // 6: sc
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MOVIE_WANT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MovieWant entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String nm = entity.getNm();
        if (nm != null) {
            stmt.bindString(2, nm);
        }
 
        String src = entity.getSrc();
        if (src != null) {
            stmt.bindString(3, src);
        }
 
        String cat = entity.getCat();
        if (cat != null) {
            stmt.bindString(4, cat);
        }
 
        String rt = entity.getRt();
        if (rt != null) {
            stmt.bindString(5, rt);
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(6, img);
        }
 
        String sc = entity.getSc();
        if (sc != null) {
            stmt.bindString(7, sc);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MovieWant entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String nm = entity.getNm();
        if (nm != null) {
            stmt.bindString(2, nm);
        }
 
        String src = entity.getSrc();
        if (src != null) {
            stmt.bindString(3, src);
        }
 
        String cat = entity.getCat();
        if (cat != null) {
            stmt.bindString(4, cat);
        }
 
        String rt = entity.getRt();
        if (rt != null) {
            stmt.bindString(5, rt);
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(6, img);
        }
 
        String sc = entity.getSc();
        if (sc != null) {
            stmt.bindString(7, sc);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public MovieWant readEntity(Cursor cursor, int offset) {
        MovieWant entity = new MovieWant( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nm
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // src
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // cat
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // rt
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // img
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // sc
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MovieWant entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setNm(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSrc(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCat(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRt(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setImg(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSc(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MovieWant entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MovieWant entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MovieWant entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
